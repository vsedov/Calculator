<diagram program="umletino" version="14.3.0"><zoom_level>10</zoom_level><help_text>Space for diagram notes
</help_text><element><id>UMLClass</id><coordinates><x>708</x><y>1706</y><w>310</w><h>510</h></coordinates><panel_attributes>&lt;&lt;enumeration&gt;&gt;
CS2800::Symbol
Package::com.rhulcw.stack
Token of possible expressions.
--
*Enum(i: String, y: int)*
_LEFT BRACKET_
_RIGHT BRACKET_
_TIMES_
_DIVIDE_
_PLUS_
_MINUS_
_INVALID_

--
*Attributes*
- priority: int
- currentSymbol: int
- symbolMap: Map&lt;String, Symbol&gt;
--
*-- Resp1*
&lt;&lt;constructor&gt;&gt; +Symbol(i: String, x: int)
+getSymbol()
  Return current Symbol

+getPriority()
  Return current priority

+convertToSymbol(str: String)
  Return str to symbol type if valid

+getSymbolmap()
  Return the map 

bg=orange</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>1198</x><y>1706</y><w>350</w><h>460</h></coordinates><panel_attributes>CS2800::Entry
Package::com.rhulcw.stack
Valid Values stored for the stack
--
*Attributes*
- str: String
- number: float 
- type: Type 
--
*-- Resp1*
&lt;&lt;constructor&gt;&gt; +Entry(inumber: float)
&lt;&lt;constructor&gt;&gt; +Entry(whichSymbol: Symbol)
&lt;&lt;constructor&gt;&gt; +Entry(str: String)
*--Resp2*
+getString()
  Gets the String Type 
  {execption = BadType}
  get string if type is sstring

+getSymbol()
  {execption = BadType} 
  get symbol if type is symbol

+getValue()
  {execption = BadType}
  get value if float

+getType() 
  get current type

bg=orange</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>1688</x><y>1826</y><w>210</w><h>150</h></coordinates><panel_attributes>&lt;&lt;enumeration&gt;&gt;
CS2800::Type
Package::com.rhulcw.stack
Different Type Values
--
_NUMBER_
_SYMBOL_
_STRING_
_INVALID_


bg=orange</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>1538</x><y>1816</y><w>250</w><h>30</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes><additional_attributes>10;10;230;10</additional_attributes></element><element><id>Relation</id><coordinates><x>1008</x><y>1816</y><w>210</w><h>30</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes><additional_attributes>190;10;10;10</additional_attributes></element><element><id>UMLClass</id><coordinates><x>1214</x><y>1222</y><w>290</w><h>350</h></coordinates><panel_attributes>CS2800::Stack
Package::com.rhulcw.stack
This class represents a
Stack of Entry values
--
*Attributes*
-entries: List&lt;Entry&gt; : ArrayList
-stackSize: integer
--
*Resp1*
+push(i: Entry)
    Add new value to the stack 

+pop(): Entry 
     {exception=EmptyStack}
    Returns (and removes) newest Entry

+top(): Entry
  {exception=EmptyStack}
   Return (but keeps) newset Entry

+getSize():integer
   return stackSize

bg=red</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>1494</x><y>1332</y><w>290</w><h>40</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1pos=-50,20
m2=&lt;&lt;facade&gt;&gt;</panel_attributes><additional_attributes>270;10;10;10</additional_attributes></element><element><id>Relation</id><coordinates><x>1014</x><y>1332</y><w>220</w><h>40</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1pos=-50,20
m2=&lt;&lt;facade&gt;&gt;</panel_attributes><additional_attributes>10;10;200;10</additional_attributes></element><element><id>Relation</id><coordinates><x>1368</x><y>1562</y><w>50</w><h>160</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=0..*</panel_attributes><additional_attributes>10;10;10;140</additional_attributes></element><element><id>UMLClass</id><coordinates><x>1688</x><y>670</y><w>380</w><h>200</h></coordinates><panel_attributes>CS2800::PostFixCaculator
Package::com.rhulcw.calculator
Reverse polish evaluation / Calculation
--
*Attributes*
-numStack: OpStack
--
*Resp1*
+evaluate(currentString: String): float
     {exception=UserStringExecption, EmptyStackException}

+CalculatorInterface.postFixSwitch 
   PostFix String Fixer 

bg=yellow</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>734</x><y>1172</y><w>290</w><h>360</h></coordinates><panel_attributes>CS2800::OpStack
Package::com.rhulcw.stack
Since the Shunting algorithm
only uses a Stack of symbols
we provide a facade to hide details
--
*Attributes*
-numStack: Stack
--
*Resp1*
+top(): 
  {exception=EmptyStack}

+push(i: Symbol)

+pop(): 
  {exception=EmptyStack}

+isEmpty():boolean

+getOperatorStack(): Stack
   retrun numStack


bg=red</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>1764</x><y>1212</y><w>270</w><h>320</h></coordinates><panel_attributes>CS2800::NumStack
Package::com.rhulcw.stack
Since reverse Polish evaluation
only uses a Stack of numeric values
we provide a facade to hide details
--
*Attributes*
-numStack: Stack
--
*Resp1*
+push(i: float)

+pop(): float
               {exception=EmptyStack}
+isEmpty():boolean

+getSize(): int
   get size of numStack 

+getNumStack(): Stack
   retrun numStack
bg=red</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>1868</x><y>865</y><w>40</w><h>370</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
</panel_attributes><additional_attributes>10;10;20;350</additional_attributes></element><element><id>UMLClass</id><coordinates><x>648</x><y>640</y><w>380</w><h>360</h></coordinates><panel_attributes>CS2800::InFixCalculator
Package::com.rhulcw.calculator
Converts infix to postfix and evaluates it using PostFix Class
--
*Attributes*
-symbolMap: Symbol.getSymbolmap()
- postFixConv: PostFixCaculator()
--
*Resp1*
+evaluate(currentString: String): float
     {exception=UserStringExecption, EmptyStackException}
     Uses Shunting Yard

+CalculatorInterface.postFixSwitch 
   PostFix String Fixer 

*Resp2*
+ isSymbolType(currentString: String): Boolean
   Check if Symbol contains a currentString

+ getTopSymbolFromStack(opStack: OpStack): Symbol
     {exception=EmptyStackException, BadType}
     Get top element from operator stack

bg=yellow</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>858</x><y>995</y><w>30</w><h>190</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
</panel_attributes><additional_attributes>10;10;10;170</additional_attributes></element><element><id>Relation</id><coordinates><x>1018</x><y>675</y><w>690</w><h>40</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
</panel_attributes><additional_attributes>670;20;10;20</additional_attributes></element><element><id>Relation</id><coordinates><x>1544</x><y>858</y><w>160</w><h>140</h></coordinates><panel_attributes>lt=&lt;&lt;.</panel_attributes><additional_attributes>10;120;140;10</additional_attributes></element><element><id>Relation</id><coordinates><x>1024</x><y>828</y><w>200</w><h>170</h></coordinates><panel_attributes>lt=&lt;&lt;.</panel_attributes><additional_attributes>180;150;10;12</additional_attributes></element><element><id>UMLNote</id><coordinates><x>1604</x><y>1048</y><w>180</w><h>120</h></coordinates><panel_attributes>Note..
bg=blue
PostFixSwitch ( + 1 , 2 )
 will evaluate 1 + 2
 and return that calculation

This is required for the class to work.</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>1554</x><y>968</y><w>110</w><h>100</h></coordinates><panel_attributes></panel_attributes><additional_attributes>10;12;90;80</additional_attributes></element><element><id>UMLClass</id><coordinates><x>1164</x><y>470</y><w>430</w><h>200</h></coordinates><panel_attributes>CS2800::StrEval
Package::com.rhulcw.calculator
Fix incorrect Strings input from user
--
*Resp1*
+postFixCheck(currentString: String): String
  return postFix formated String removes incorrect white spaces

+inFixCheck(currentString: String): String
  retrun InFix formated String 

+bracketValid(currentString: String): Boolean
   InFix requires bracket validation 

bg=blue
</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLNote</id><coordinates><x>1144</x><y>740</y><w>250</w><h>70</h></coordinates><panel_attributes>Note..
bg=blue
Convert Infix to postFix and call Post Fix
for answer</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>1014</x><y>718</y><w>150</w><h>50</h></coordinates><panel_attributes></panel_attributes><additional_attributes>10;22;130;20</additional_attributes></element><element><id>UMLClass</id><coordinates><x>90</x><y>520</y><w>400</w><h>310</h></coordinates><panel_attributes>&lt;&lt;controller&gt;&gt;
CS2800::CliController
Package::com.rhulcw.calculator
CliController option to launch GUI or Cli 
Calls StrEval depending on what caculation being processed
--
*Attributes*
-stEval: StrEval
-infix: InFixCalculator
-postFix: PostFixCalculator
--
*Responsibilities*
+launchCli()
   gives option for user between infix and post Fix

+outputMenue()
   Option to launch Gui 

+launchGUi()
   Launch Gui 

bg=blue</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>50</x><y>500</y><w>470</w><h>460</h></coordinates><panel_attributes>valign=bottom
Controller
layer=0
fontsize=28
fg=magenta

group=1

bg=black</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>10</x><y>1009</y><w>500</w><h>560</h></coordinates><panel_attributes>valign=bottom
View Assembly
fontsize=28
fg=magenta

layer=-1


bg=black</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>340</x><y>819</y><w>90</w><h>250</h></coordinates><panel_attributes>lt=&lt;.</panel_attributes><additional_attributes>10;230;70;10</additional_attributes></element><element><id>UMLClass</id><coordinates><x>130</x><y>1059</y><w>310</w><h>120</h></coordinates><panel_attributes>&lt;&lt;Interface&gt;&gt;
CS2800::Driver
Package::com.rhulcw.calculator
Launches Gui
--
*Resp1*

+launch(args)


bg=green</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>250</x><y>1214</y><w>230</w><h>180</h></coordinates><panel_attributes>&lt;&lt;view&gt;&gt;
CS2800::Gui
--
Gui with 
A. Infix and PostFix Button 
B. Calculate Butotn 
C. TextBox for History
D. AnswerBox
--
*Resp1*
output: TextField 
  Answer of Calculation


bg=green</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>340</x><y>1169</y><w>60</w><h>60</h></coordinates><panel_attributes>lt=&lt;.</panel_attributes><additional_attributes>40;40;10;10</additional_attributes></element><element><id>UMLNote</id><coordinates><x>0</x><y>330</y><w>200</w><h>120</h></coordinates><panel_attributes>Note..
bg=blue
LauncCli will have to call Calcmodel on 
userinput depending 
on option they have 
selected and then evaluate 
the option</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>190</x><y>338</y><w>170</w><h>200</h></coordinates><panel_attributes></panel_attributes><additional_attributes>10;10;150;180</additional_attributes></element><element><id>UMLClass</id><coordinates><x>1198</x><y>990</y><w>380</w><h>210</h></coordinates><panel_attributes>&lt;&lt;interface&gt;&gt;
CS2800::CalculatorInerface
Package::com.rhulcw.calculator
Holds Function for both PostFix and Infix Calculations
--
*Resp1*
+postFixSwitch(strSym: String, eval1: Float, eval2: Float)
     {exception=UserStringExecption}
     return strSym evaluated expression of eval1 and eval2 
     

+inFixSwitch(i:OpStack, strSym:Symbol) : OpStack
     return  symbol pushed to stack
     

bg=yellow</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>560</x><y>0</y><w>1520</w><h>2240</h></coordinates><panel_attributes>valign=bottom
Model Assembly
layer=-1
fontsize=28
fg=blue
bg=gray

group=2</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>1164</x><y>40</y><w>430</w><h>200</h></coordinates><panel_attributes>&lt;&lt;Model&gt;&gt;
CS2800::CalcModel
Package::com.rhulcw.calculator
Uses StrEval then PostFIX OR inFix depending on user choice
--
*Resp1*
+inFixEvaluation(i:String)
     {exception=EmptyStackException, BadType, UserStringExecption}
  Calls StrEval.InFixCheck before calling InFixCaculator

+postFixEvaluation(:String)
     {exception=EmptyStackException, UserStringExecption}
  Calls StrEval.postFixCheck before calling PostFixCaculator
bg=red</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>798</x><y>225</y><w>390</w><h>440</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
</panel_attributes><additional_attributes>370;10;10;420</additional_attributes></element><element><id>Relation</id><coordinates><x>1578</x><y>225</y><w>330</w><h>460</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
</panel_attributes><additional_attributes>10;10;310;440</additional_attributes></element><element><id>Relation</id><coordinates><x>1368</x><y>225</y><w>30</w><h>260</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
</panel_attributes><additional_attributes>10;10;10;240</additional_attributes></element><element><id>Relation</id><coordinates><x>484</x><y>98</y><w>700</w><h>450</h></coordinates><panel_attributes>lt=&lt;&lt;.</panel_attributes><additional_attributes>680;10;10;422</additional_attributes></element></diagram>